From b2b7f754c60922b95fecb482b9acbd717559f3a6 Mon Sep 17 00:00:00 2001
From: Watson Xu <xuhuashan@gmail.com>
Date: Wed, 21 Dec 2016 11:33:45 +0800
Subject: [PATCH 06/10] add license verification support

a special OSD will displayed at the center of the video
when device is not authorized.
---
 src/Makefile.am               |  2 +-
 src/Makefile.in               |  2 +-
 src/dbus/dbus-ipcam-base.cpp  | 24 +++++++++++
 src/dbus/dbus-ipcam-base.h    |  3 ++
 src/dbus/dbus-video-encoder.h |  3 +-
 src/ipcam-runtime.cpp         | 93 ++++++++++++++++++++++++++++++++++++++++++-
 src/ipcam-runtime.h           |  1 +
 src/main.cpp                  |  2 +
 8 files changed, 126 insertions(+), 4 deletions(-)

diff --git a/src/Makefile.am b/src/Makefile.am
index 1a6aa05..1efafb4 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -34,7 +34,7 @@ live_streamer_SOURCES = \
 live_streamer_LDFLAGS = $(LIVE555_LDFLAGS) \
 	$(DBUSXX_LIBS) \
 	$(FREETYPE_LIBS) $(FONTCONFIG_LIBS) $(SDL_LIBS) \
-	$(LIBEV_LDFLAGS) -ldl
+	$(LIBEV_LDFLAGS) -ldl -lgmp
 
 live_streamer_CPPFLAGS = $(AM_CPPFLAGS)
 live_streamer_LDADD = \
diff --git a/src/Makefile.in b/src/Makefile.in
index fe389aa..0e87eda 100644
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -429,7 +429,7 @@ live_streamer_SOURCES = \
 
 live_streamer_LDFLAGS = $(LIVE555_LDFLAGS) $(DBUSXX_LIBS) \
 	$(FREETYPE_LIBS) $(FONTCONFIG_LIBS) $(SDL_LIBS) \
-	$(LIBEV_LDFLAGS) -ldl $(am__append_2) $(am__append_4) \
+	$(LIBEV_LDFLAGS) -ldl -lgmp $(am__append_2) $(am__append_4) \
 	$(am__append_7) $(am__append_10) $(am__append_13)
 live_streamer_CPPFLAGS = $(AM_CPPFLAGS) $(am__append_1) \
 	$(am__append_3) $(am__append_6) $(am__append_9) \
diff --git a/src/dbus/dbus-ipcam-base.cpp b/src/dbus/dbus-ipcam-base.cpp
index ff946ad..97d6928 100644
--- a/src/dbus/dbus-ipcam-base.cpp
+++ b/src/dbus/dbus-ipcam-base.cpp
@@ -40,6 +40,30 @@ IpcamBase::IpcamBase(IpcamRuntime &runtime, const Path &path)
 {
 }
 
+DBus::Variant IpcamBase::Get(const std::string &interface,
+                             const std::string &property)
+{
+	InterfaceAdaptor *adaptor = (InterfaceAdaptor*)find_interface(interface);
+	if (!adaptor)
+		throw ErrorFailed("requested interface not found");
+
+	DBus::Variant value;
+	do_property_get(*adaptor, property, value);
+
+	return value;
+}
+
+void IpcamBase::Set(const std::string &interface,
+                    const std::string &property,
+                    const DBus::Variant &value)
+{
+	InterfaceAdaptor *adaptor = (InterfaceAdaptor*)find_interface(interface);
+	if (!adaptor)
+		throw ErrorFailed("requested interface not found");
+
+	do_property_set(*adaptor, property, value);
+}
+
 #ifdef HAVE_LIBCONFIG_SUPPORT
 static void load_iter_from_setting
 (DBusSignatureIter *type, MessageIter &iter, Setting &s)
diff --git a/src/dbus/dbus-ipcam-base.h b/src/dbus/dbus-ipcam-base.h
index 4e580df..ba9a936 100644
--- a/src/dbus/dbus-ipcam-base.h
+++ b/src/dbus/dbus-ipcam-base.h
@@ -34,6 +34,9 @@ class IpcamBase :
 public:
 	IpcamBase(IpcamRuntime &runtime, const Path &path);
 
+	DBus::Variant Get(const std::string &interface, const std::string &property);
+	void Set(const std::string &interface, const std::string &property, const DBus::Variant &value);
+
 #ifdef HAVE_LIBCONFIG_SUPPORT
 	virtual void LoadConfig();
 #endif
diff --git a/src/dbus/dbus-video-encoder.h b/src/dbus/dbus-video-encoder.h
index 972efbc..be0fbf2 100644
--- a/src/dbus/dbus-video-encoder.h
+++ b/src/dbus/dbus-video-encoder.h
@@ -44,6 +44,8 @@ public:
 	void do_property_set
 		(DBus::InterfaceAdaptor &interface, const std::string &property, const DBus::Variant &value);
 
+    VideoOSD& NewOSD(const uint32_t index);
+
 #ifdef HAVE_LIBCONFIG_SUPPORT
     void LoadConfig();
 #endif
@@ -55,7 +57,6 @@ protected:
     IVideoEncoder   *_video_encoder;
 private:
     VideoOSDTable   _osds;
-    VideoOSD& NewOSD(const uint32_t index);
 };
 
 class H264VideoEncoder : 
diff --git a/src/ipcam-runtime.cpp b/src/ipcam-runtime.cpp
index 23e318f..fc9ce67 100644
--- a/src/ipcam-runtime.cpp
+++ b/src/ipcam-runtime.cpp
@@ -21,6 +21,9 @@
 #include <config.h>
 #endif
 
+#include <fstream>
+#include <algorithm>
+#include <gmp.h>
 #include <RTSPServer.hh>
 #include <ServerMediaSession.hh>
 #include <FramedFilter.hh>
@@ -175,8 +178,96 @@ void IpcamRuntime::config_timer_handler(ev::timer &w, int revents)
 void IpcamRuntime::SaveConfig()
 {
 	_config_dirty = true;
-	_config_timer.set(20.0, 0);
+	_config_timer.set(10.0, 0);
 	_config_timer.set<IpcamRuntime, &IpcamRuntime::config_timer_handler>(this);
 	_config_timer.start();
 }
 #endif
+
+#define RSA_KEY_LEN		2048
+
+static const char *rsa_key_n = "7b10cb6875b43d1029f1a94fc2e6117dcc8cca8af925e6ed10e82e2fd7f4b1bfa005d11c4e4b6026c92703f2f2d93c8e3b2aeec2fce2ab1693448b3352fd85c24cbeb353ef36f0f4e30efc34116a35ee942c60ad6a4a65ad86e7f56012a97c0d1c1324a04009c88faddf6ba4ae5307f195fca522cfc2a071574fe1b75b9d39206f047e50b241d4f891222114b6d48420db5abb9def919c932aec9d46120b179f943cefa1b4d83f07348014d8fb49180be1d47f113ef525124e5feed849e38e3e426dab168c37b5b8df1875c2249fde1afd0bd882f00c13251f3deec56ad9d55f4bec04b73f41bd0462738cf33982c7e5d3ff48b2e8bd8eac0b338199c3cc84f7";
+static const char *rsa_key_d = "49bcd26410c2a223e13def58df4ac308415bcab0628097514c6411e890d908f7ec860fb98a2017c8a5963f037f07330575e64f917dbcc30e8fc6ee311e74d1848e3f656bd15576230539a15c01634655616b05b262919942d426801bc492d0c57a20ee3d26a1b60e80fbf19f86e4314a4bb849aa061a73cff5a4e375ddeae2a2fbad9562ab9c91e39d63637dba810229b7c5dc1bad685c32fff8441dda2990b2504aff76e5e07d8322c0166e8c58931b008ea1727cb2c96f66bb72e9ed47410287a94c2d4e79a62ad2020fb5427445ed51372685b31f38a0808e05459d63a27b4b59f921aad4b4d3d0c9ef4f32043ae9c065e3514c00ea63ef6daaf7e9e0b961";
+//static const char *rsa_key_e = 65537;
+
+static std::string rsa_decrypt(const std::string &cipher_text)
+{
+	mpz_t M, C, n, d;
+	mpz_init_set_str(C, cipher_text.c_str(), 16);
+	mpz_init_set_str(n, rsa_key_n, 16);
+	mpz_init_set_str(d, rsa_key_d, 16);
+	mpz_init(M);
+
+	mpz_powm(M, C, d, n);
+
+	char result[RSA_KEY_LEN + 10];
+	mpz_get_str(result, 16, M);
+
+	return std::string(result);
+}
+
+static std::string load_from_file(const std::string &filename)
+{
+	std::string line;
+	std::ifstream ifs(filename);
+
+	while (ifs.good()) {
+		char buf[RSA_KEY_LEN / 2];
+		ifs.getline(buf, sizeof(buf));
+		std::string s(buf);
+		if ((s.size() > 0) && (s[0] != '#')) {
+			line = s;
+			break;
+		}
+	}
+	return line;
+}
+
+static std::string str_to_hex(const std::string &text)
+{
+	std::string result;
+	std::for_each(text.begin(), text.end(), [&result](char c) {
+		char buf[4];
+		sprintf(buf, "%02x", (int)c);
+		result += buf;
+	});
+	return result;
+}
+
+void IpcamRuntime::Authentication()
+{
+	std::string deviceid = str_to_hex(load_from_file("/etc/deviceid"));
+	std::string securecode = load_from_file("/etc/securecode");
+	std::string plaintext = rsa_decrypt(securecode);
+	if (plaintext == deviceid)
+		return;
+
+	printf("WARN: device is unauthorized\n");
+	for (auto &venc : _video_encoder_list) {
+		try {
+			DBus::VideoOSD &osd = venc->NewOSD(8);
+			DBus::Variant value;
+			DBus::MessageIter wi;
+
+			value.clear(); wi = value.writer(); wi << (uint32_t)0;
+			osd.Set("ipcam.Media.OSD", "Type", value);
+			value.clear(); wi = value.writer(); wi << (uint32_t)16;
+			osd.Set("ipcam.Media.OSD", "BackgroundAlpha", value);
+			value.clear(); wi = value.writer(); wi << (bool)false;
+			osd.Set("ipcam.Media.OSD", "InvertColor", value);
+			value.clear(); wi = value.writer(); wi << std::string("Sans-24:Bold");
+			osd.Set("ipcam.Media.OSD", "FontName", value);
+			value.clear(); wi = value.writer(); wi << (uint32_t)0xff0000;
+			osd.Set("ipcam.Media.OSD", "FontColor", value);
+			DBus::Struct<int32_t, int32_t> pos = { 324, 272 };
+			value.clear(); wi = value.writer(); wi << pos;
+			osd.Set("ipcam.Media.OSD", "Position", value);
+			value.clear(); wi = value.writer(); wi << std::string("Ecam");
+			osd.Set("ipcam.Media.OSD", "Text", value);
+			value.clear(); wi = value.writer(); wi << true;
+			osd.Set("ipcam.Media.OSD", "Visible", value);
+		} catch (DBus::Error &e) {
+			printf("%s: %s\n", e.name(), e.what());
+		}
+	}
+}
diff --git a/src/ipcam-runtime.h b/src/ipcam-runtime.h
index 7e607f5..5bded12 100644
--- a/src/ipcam-runtime.h
+++ b/src/ipcam-runtime.h
@@ -68,6 +68,7 @@ public:
 	void LoadConfig();
 	void SaveConfig();
 #endif
+	void Authentication();
 private:
 	ev::default_loop	&_loop;
 	RTSPServer          *_rtsp_server;
diff --git a/src/main.cpp b/src/main.cpp
index c9a451f..c8e2e45 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -264,6 +264,8 @@ int main(int argc, char *argv[])
 	Hi3520mppMedia hi3520media(runtime, sensor_type);
 #endif
 
+	runtime->Authentication();
+
 #ifdef HAVE_LIBCONFIG_SUPPORT
 	runtime->LoadConfig();
 #endif
-- 
2.9.3

