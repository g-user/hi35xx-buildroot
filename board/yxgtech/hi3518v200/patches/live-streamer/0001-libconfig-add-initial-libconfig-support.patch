From a07e9648c555f87a4a79ec92376e351e6c706898 Mon Sep 17 00:00:00 2001
From: Watson Xu <xuhuashan@gmail.com>
Date: Tue, 8 Nov 2016 12:07:25 +0800
Subject: [PATCH 01/10] libconfig: add initial libconfig support

this enable load/save media setting from/to configuration file
via libconfig.
---
 Makefile.in                            |   2 +
 config.h.in                            |   3 +
 configure                              | 101 +++++++++-
 configure.ac                           |   7 +
 src/Makefile.am                        |   6 +
 src/Makefile.in                        |  44 +++--
 src/dbus/Makefile.in                   |   2 +
 src/dbus/dbus-ipcam-base.cpp           | 329 ++++++++++++++++++++++++++++++++-
 src/dbus/dbus-ipcam-base.h             |   4 +
 src/dbus/dbus-video-encoder.cpp        |  44 ++++-
 src/dbus/dbus-video-encoder.h          |  11 +-
 src/ipcam-runtime.cpp                  |  59 ++++++
 src/ipcam-runtime.h                    |  18 ++
 src/main.cpp                           |   4 +
 src/platform/Makefile.in               |   2 +
 src/platform/hi3518v100mpp/Makefile.in |   2 +
 src/platform/hi3518v200mpp/Makefile.in |   2 +
 src/platform/hi3520v100mpp/Makefile.in |   2 +
 src/rtsp-server/Makefile.in            |   2 +
 19 files changed, 615 insertions(+), 29 deletions(-)

diff --git a/Makefile.in b/Makefile.in
index 4a26699..5b93905 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -286,6 +286,8 @@ INSTALL_SCRIPT = @INSTALL_SCRIPT@
 INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
 LD = @LD@
 LDFLAGS = @LDFLAGS@
+LIBCONFIG_CFLAGS = @LIBCONFIG_CFLAGS@
+LIBCONFIG_LIBS = @LIBCONFIG_LIBS@
 LIBEV_LDFLAGS = @LIBEV_LDFLAGS@
 LIBOBJS = @LIBOBJS@
 LIBS = @LIBS@
diff --git a/config.h.in b/config.h.in
index 30a1d29..fcc2314 100644
--- a/config.h.in
+++ b/config.h.in
@@ -24,6 +24,9 @@
 /* Define to 1 if you have the <inttypes.h> header file. */
 #undef HAVE_INTTYPES_H
 
+/* libconfig support */
+#undef HAVE_LIBCONFIG_SUPPORT
+
 /* Define to 1 if you have the <memory.h> header file. */
 #undef HAVE_MEMORY_H
 
diff --git a/configure b/configure
index 3901032..0284508 100755
--- a/configure
+++ b/configure
@@ -653,6 +653,10 @@ HI3518V100MPP_LDFLAGS
 HI3518V100MPP_CPPFLAGS
 LIVE555_LDFLAGS
 LIVE555_CPPFLAGS
+ENABLE_LIBCONFIG_FALSE
+ENABLE_LIBCONFIG_TRUE
+LIBCONFIG_LIBS
+LIBCONFIG_CFLAGS
 SDL_LIBS
 SDL_CFLAGS
 FONTCONFIG_LIBS
@@ -823,7 +827,9 @@ FREETYPE_LIBS
 FONTCONFIG_CFLAGS
 FONTCONFIG_LIBS
 SDL_CFLAGS
-SDL_LIBS'
+SDL_LIBS
+LIBCONFIG_CFLAGS
+LIBCONFIG_LIBS'
 
 
 # Initialize some variables set by options.
@@ -1505,6 +1511,10 @@ Some influential environment variables:
               linker flags for FONTCONFIG, overriding pkg-config
   SDL_CFLAGS  C compiler flags for SDL, overriding pkg-config
   SDL_LIBS    linker flags for SDL, overriding pkg-config
+  LIBCONFIG_CFLAGS
+              C compiler flags for LIBCONFIG, overriding pkg-config
+  LIBCONFIG_LIBS
+              linker flags for LIBCONFIG, overriding pkg-config
 
 Use these variables to override the choices made by `configure' or to help
 it to find libraries and programs with nonstandard names/locations.
@@ -16015,6 +16025,91 @@ $as_echo "yes" >&6; }
 fi
 
 
+pkg_failed=no
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for LIBCONFIG" >&5
+$as_echo_n "checking for LIBCONFIG... " >&6; }
+
+if test -n "$LIBCONFIG_CFLAGS"; then
+    pkg_cv_LIBCONFIG_CFLAGS="$LIBCONFIG_CFLAGS"
+ elif test -n "$PKG_CONFIG"; then
+    if test -n "$PKG_CONFIG" && \
+    { { $as_echo "$as_me:${as_lineno-$LINENO}: \$PKG_CONFIG --exists --print-errors \"libconfig++\""; } >&5
+  ($PKG_CONFIG --exists --print-errors "libconfig++") 2>&5
+  ac_status=$?
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; }; then
+  pkg_cv_LIBCONFIG_CFLAGS=`$PKG_CONFIG --cflags "libconfig++" 2>/dev/null`
+		      test "x$?" != "x0" && pkg_failed=yes
+else
+  pkg_failed=yes
+fi
+ else
+    pkg_failed=untried
+fi
+if test -n "$LIBCONFIG_LIBS"; then
+    pkg_cv_LIBCONFIG_LIBS="$LIBCONFIG_LIBS"
+ elif test -n "$PKG_CONFIG"; then
+    if test -n "$PKG_CONFIG" && \
+    { { $as_echo "$as_me:${as_lineno-$LINENO}: \$PKG_CONFIG --exists --print-errors \"libconfig++\""; } >&5
+  ($PKG_CONFIG --exists --print-errors "libconfig++") 2>&5
+  ac_status=$?
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; }; then
+  pkg_cv_LIBCONFIG_LIBS=`$PKG_CONFIG --libs "libconfig++" 2>/dev/null`
+		      test "x$?" != "x0" && pkg_failed=yes
+else
+  pkg_failed=yes
+fi
+ else
+    pkg_failed=untried
+fi
+
+
+
+if test $pkg_failed = yes; then
+   	{ $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+
+if $PKG_CONFIG --atleast-pkgconfig-version 0.20; then
+        _pkg_short_errors_supported=yes
+else
+        _pkg_short_errors_supported=no
+fi
+        if test $_pkg_short_errors_supported = yes; then
+	        LIBCONFIG_PKG_ERRORS=`$PKG_CONFIG --short-errors --print-errors --cflags --libs "libconfig++" 2>&1`
+        else
+	        LIBCONFIG_PKG_ERRORS=`$PKG_CONFIG --print-errors --cflags --libs "libconfig++" 2>&1`
+        fi
+	# Put the nasty error message in config.log where it belongs
+	echo "$LIBCONFIG_PKG_ERRORS" >&5
+
+	have_libconfig=no
+elif test $pkg_failed = untried; then
+     	{ $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+	have_libconfig=no
+else
+	LIBCONFIG_CFLAGS=$pkg_cv_LIBCONFIG_CFLAGS
+	LIBCONFIG_LIBS=$pkg_cv_LIBCONFIG_LIBS
+        { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
+$as_echo "yes" >&6; }
+	have_libconfig=yes
+fi
+if test "x$have_libconfig" = "xyes"; then
+
+$as_echo "#define HAVE_LIBCONFIG_SUPPORT 1" >>confdefs.h
+
+fi
+ if  test "x$have_libconfig" = "xyes" ; then
+  ENABLE_LIBCONFIG_TRUE=
+  ENABLE_LIBCONFIG_FALSE='#'
+else
+  ENABLE_LIBCONFIG_TRUE='#'
+  ENABLE_LIBCONFIG_FALSE=
+fi
+
+
+
 # --------------------- #
 # Check for libraries.  #
 # --------------------- #
@@ -16663,6 +16758,10 @@ if test -z "${am__fastdepCXX_TRUE}" && test -z "${am__fastdepCXX_FALSE}"; then
   as_fn_error $? "conditional \"am__fastdepCXX\" was never defined.
 Usually this means the macro was only invoked conditionally." "$LINENO" 5
 fi
+if test -z "${ENABLE_LIBCONFIG_TRUE}" && test -z "${ENABLE_LIBCONFIG_FALSE}"; then
+  as_fn_error $? "conditional \"ENABLE_LIBCONFIG\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
 if test -z "${ENABLE_HI3518V100MPP_TRUE}" && test -z "${ENABLE_HI3518V100MPP_FALSE}"; then
   as_fn_error $? "conditional \"ENABLE_HI3518V100MPP\" was never defined.
 Usually this means the macro was only invoked conditionally." "$LINENO" 5
diff --git a/configure.ac b/configure.ac
index 044b2f0..01923ed 100644
--- a/configure.ac
+++ b/configure.ac
@@ -32,6 +32,13 @@ PKG_CHECK_MODULES(FONTCONFIG, [fontconfig])
 
 PKG_CHECK_MODULES(SDL, [sdl SDL_ttf SDL_image])
 
+PKG_CHECK_MODULES(LIBCONFIG, [libconfig++],
+	[have_libconfig=yes], [have_libconfig=no])
+if test "x$have_libconfig" = "xyes"; then
+	AC_DEFINE([HAVE_LIBCONFIG_SUPPORT], [1], [libconfig support])
+fi
+AM_CONDITIONAL([ENABLE_LIBCONFIG], [ test "x$have_libconfig" = "xyes" ])
+
 
 # --------------------- #
 # Check for libraries.  #
diff --git a/src/Makefile.am b/src/Makefile.am
index ca768ca..1a6aa05 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -3,6 +3,7 @@
 AM_CPPFLAGS = \
 	-DPACKAGE_LOCALE_DIR=\""$(localedir)"\" \
 	-DPACKAGE_DATA_DIR=\""$(pkgdatadir)"\" \
+	-DSYSCONFDIR=\""$(sysconfdir)"\" \
 	$(LIVE555_CPPFLAGS) \
 	$(DBUSXX_CFLAGS) \
 	$(FREETYPE_CFLAGS) \
@@ -40,6 +41,11 @@ live_streamer_LDADD = \
 	$(builddir)/dbus/libdbus-iface.la \
 	$(builddir)/rtsp-server/librtsp-server.la
 
+if ENABLE_LIBCONFIG
+live_streamer_CPPFLAGS += $(LIBCONFIG_CPPFLAGS)
+live_streamer_LDFLAGS += $(LIBCONFIG_LIBS)
+endif
+
 if ENABLE_HI3518V100MPP
 live_streamer_CPPFLAGS += $(HI3518V100MPP_CPPFLAGS) -I$(srcdir)/platform/hi3518v100mpp
 live_streamer_LDFLAGS += $(HI3518V100MPP_LDFLAGS)
diff --git a/src/Makefile.in b/src/Makefile.in
index 08cfe70..fe389aa 100644
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -89,18 +89,20 @@ POST_UNINSTALL = :
 build_triplet = @build@
 host_triplet = @host@
 bin_PROGRAMS = live-streamer$(EXEEXT)
-@ENABLE_HI3518V100MPP_TRUE@am__append_1 = $(HI3518V100MPP_CPPFLAGS) -I$(srcdir)/platform/hi3518v100mpp
-@ENABLE_HI3518V100MPP_TRUE@am__append_2 = $(HI3518V100MPP_LDFLAGS)
-@ENABLE_HI3518V100MPP_TRUE@am__append_3 = $(builddir)/platform/hi3518v100mpp/libhi3518v100mpp.la
-@ENABLE_HI3518V200MPP_TRUE@am__append_4 = $(HI3518V200MPP_CPPFLAGS) -I$(srcdir)/platform/hi3518v200mpp
-@ENABLE_HI3518V200MPP_TRUE@am__append_5 = $(HI3518V200MPP_LDFLAGS)
-@ENABLE_HI3518V200MPP_TRUE@am__append_6 = $(builddir)/platform/hi3518v200mpp/libhi3518v200mpp.la
-@ENABLE_HI3520V100MPP_TRUE@am__append_7 = $(HI3520V100MPP_CPPFLAGS) -I$(srcdir)/platform/hi3520v100mpp
-@ENABLE_HI3520V100MPP_TRUE@am__append_8 = $(HI3520V100MPP_LDFLAGS)
-@ENABLE_HI3520V100MPP_TRUE@am__append_9 = $(builddir)/platform/hi3520v100mpp/libhi3520v100mpp.la
-@ENABLE_HI3520DV200MPP_TRUE@am__append_10 = $(HI3520DV200MPP_CPPFLAGS) -I$(srcdir)/platform/hi3520v100mpp
-@ENABLE_HI3520DV200MPP_TRUE@am__append_11 = $(HI3520DV200MPP_LDFLAGS)
-@ENABLE_HI3520DV200MPP_TRUE@am__append_12 = $(builddir)/platform/hi3520v100mpp/libhi3520v100mpp.la
+@ENABLE_LIBCONFIG_TRUE@am__append_1 = $(LIBCONFIG_CPPFLAGS)
+@ENABLE_LIBCONFIG_TRUE@am__append_2 = $(LIBCONFIG_LIBS)
+@ENABLE_HI3518V100MPP_TRUE@am__append_3 = $(HI3518V100MPP_CPPFLAGS) -I$(srcdir)/platform/hi3518v100mpp
+@ENABLE_HI3518V100MPP_TRUE@am__append_4 = $(HI3518V100MPP_LDFLAGS)
+@ENABLE_HI3518V100MPP_TRUE@am__append_5 = $(builddir)/platform/hi3518v100mpp/libhi3518v100mpp.la
+@ENABLE_HI3518V200MPP_TRUE@am__append_6 = $(HI3518V200MPP_CPPFLAGS) -I$(srcdir)/platform/hi3518v200mpp
+@ENABLE_HI3518V200MPP_TRUE@am__append_7 = $(HI3518V200MPP_LDFLAGS)
+@ENABLE_HI3518V200MPP_TRUE@am__append_8 = $(builddir)/platform/hi3518v200mpp/libhi3518v200mpp.la
+@ENABLE_HI3520V100MPP_TRUE@am__append_9 = $(HI3520V100MPP_CPPFLAGS) -I$(srcdir)/platform/hi3520v100mpp
+@ENABLE_HI3520V100MPP_TRUE@am__append_10 = $(HI3520V100MPP_LDFLAGS)
+@ENABLE_HI3520V100MPP_TRUE@am__append_11 = $(builddir)/platform/hi3520v100mpp/libhi3520v100mpp.la
+@ENABLE_HI3520DV200MPP_TRUE@am__append_12 = $(HI3520DV200MPP_CPPFLAGS) -I$(srcdir)/platform/hi3520v100mpp
+@ENABLE_HI3520DV200MPP_TRUE@am__append_13 = $(HI3520DV200MPP_LDFLAGS)
+@ENABLE_HI3520DV200MPP_TRUE@am__append_14 = $(builddir)/platform/hi3520v100mpp/libhi3520v100mpp.la
 subdir = src
 ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
 am__aclocal_m4_deps = $(top_srcdir)/m4/ax_cxx_compile_stdcxx_11.m4 \
@@ -122,8 +124,8 @@ am_live_streamer_OBJECTS = live_streamer-main.$(OBJEXT) \
 	live_streamer-ipcam-video-osd.$(OBJEXT)
 live_streamer_OBJECTS = $(am_live_streamer_OBJECTS)
 live_streamer_DEPENDENCIES = $(builddir)/dbus/libdbus-iface.la \
-	$(builddir)/rtsp-server/librtsp-server.la $(am__append_3) \
-	$(am__append_6) $(am__append_9) $(am__append_12)
+	$(builddir)/rtsp-server/librtsp-server.la $(am__append_5) \
+	$(am__append_8) $(am__append_11) $(am__append_14)
 AM_V_lt = $(am__v_lt_@AM_V@)
 am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)
 am__v_lt_0 = --silent
@@ -305,6 +307,8 @@ INSTALL_SCRIPT = @INSTALL_SCRIPT@
 INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
 LD = @LD@
 LDFLAGS = @LDFLAGS@
+LIBCONFIG_CFLAGS = @LIBCONFIG_CFLAGS@
+LIBCONFIG_LIBS = @LIBCONFIG_LIBS@
 LIBEV_LDFLAGS = @LIBEV_LDFLAGS@
 LIBOBJS = @LIBOBJS@
 LIBS = @LIBS@
@@ -398,6 +402,7 @@ top_srcdir = @top_srcdir@
 AM_CPPFLAGS = \
 	-DPACKAGE_LOCALE_DIR=\""$(localedir)"\" \
 	-DPACKAGE_DATA_DIR=\""$(pkgdatadir)"\" \
+	-DSYSCONFDIR=\""$(sysconfdir)"\" \
 	$(LIVE555_CPPFLAGS) \
 	$(DBUSXX_CFLAGS) \
 	$(FREETYPE_CFLAGS) \
@@ -424,13 +429,14 @@ live_streamer_SOURCES = \
 
 live_streamer_LDFLAGS = $(LIVE555_LDFLAGS) $(DBUSXX_LIBS) \
 	$(FREETYPE_LIBS) $(FONTCONFIG_LIBS) $(SDL_LIBS) \
-	$(LIBEV_LDFLAGS) -ldl $(am__append_2) $(am__append_5) \
-	$(am__append_8) $(am__append_11)
+	$(LIBEV_LDFLAGS) -ldl $(am__append_2) $(am__append_4) \
+	$(am__append_7) $(am__append_10) $(am__append_13)
 live_streamer_CPPFLAGS = $(AM_CPPFLAGS) $(am__append_1) \
-	$(am__append_4) $(am__append_7) $(am__append_10)
+	$(am__append_3) $(am__append_6) $(am__append_9) \
+	$(am__append_12)
 live_streamer_LDADD = $(builddir)/dbus/libdbus-iface.la \
-	$(builddir)/rtsp-server/librtsp-server.la $(am__append_3) \
-	$(am__append_6) $(am__append_9) $(am__append_12)
+	$(builddir)/rtsp-server/librtsp-server.la $(am__append_5) \
+	$(am__append_8) $(am__append_11) $(am__append_14)
 all: all-recursive
 
 .SUFFIXES:
diff --git a/src/dbus/Makefile.in b/src/dbus/Makefile.in
index 80714cc..834b342 100644
--- a/src/dbus/Makefile.in
+++ b/src/dbus/Makefile.in
@@ -274,6 +274,8 @@ INSTALL_SCRIPT = @INSTALL_SCRIPT@
 INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
 LD = @LD@
 LDFLAGS = @LDFLAGS@
+LIBCONFIG_CFLAGS = @LIBCONFIG_CFLAGS@
+LIBCONFIG_LIBS = @LIBCONFIG_LIBS@
 LIBEV_LDFLAGS = @LIBEV_LDFLAGS@
 LIBOBJS = @LIBOBJS@
 LIBS = @LIBS@
diff --git a/src/dbus/dbus-ipcam-base.cpp b/src/dbus/dbus-ipcam-base.cpp
index 9fbebd5..ff946ad 100644
--- a/src/dbus/dbus-ipcam-base.cpp
+++ b/src/dbus/dbus-ipcam-base.cpp
@@ -21,6 +21,12 @@
 #include <config.h>
 #endif
 
+#ifdef HAVE_LIBCONFIG_SUPPORT
+#include <algorithm>
+#include <libconfig.h++>
+using namespace libconfig;
+#endif
+
 #include <dbus/dbus.h>
 #include <dbus-c++/dbus.h>
 #include <ipcam-runtime.h>
@@ -34,10 +40,296 @@ IpcamBase::IpcamBase(IpcamRuntime &runtime, const Path &path)
 {
 }
 
+#ifdef HAVE_LIBCONFIG_SUPPORT
+static void load_iter_from_setting
+(DBusSignatureIter *type, MessageIter &iter, Setting &s)
+{
+	switch (dbus_signature_iter_get_current_type(type)) {
+	case DBUS_TYPE_BOOLEAN:
+		{
+			iter << (bool)s;
+			break;
+		}
+	case DBUS_TYPE_BYTE:
+		{
+			iter << (unsigned char)(int)s;
+			break;
+		}
+	case DBUS_TYPE_INT16:
+		{
+			iter << (dbus_int16_t)(int)s;
+			break;
+		}
+	case DBUS_TYPE_UINT16:
+		{
+			iter << (dbus_uint16_t)(int)s;
+			break;
+		}
+	case DBUS_TYPE_INT32:
+		{
+			iter << (dbus_int32_t)(int)s;
+			break;
+		}
+	case DBUS_TYPE_UINT32:
+		{
+			iter << (dbus_uint32_t)(int)s;
+			break;
+		}
+	case DBUS_TYPE_INT64:
+		{
+			iter << (dbus_int64_t)(int)s;
+			break;
+		}
+	case DBUS_TYPE_UINT64:
+		{
+			iter << (dbus_uint64_t)(int)s;
+			break;
+		}
+	case DBUS_TYPE_DOUBLE:
+		{
+			iter << (double)s;
+			break;
+		}
+	case DBUS_TYPE_STRING:
+	case DBUS_TYPE_OBJECT_PATH:
+	case DBUS_TYPE_SIGNATURE:
+		{
+			iter << (std::string)(const char*)s;
+			break;
+		}
+	case DBUS_TYPE_ARRAY:
+		{
+			DBusSignatureIter subtype;
+			dbus_signature_iter_recurse(type, &subtype);
+			char *signature = dbus_signature_iter_get_signature(&subtype);
+			MessageIter subiter = iter.new_array(signature); 
+			for (Setting::iterator sit = s.begin(); sit != s.end(); sit++) {
+				load_iter_from_setting(&subtype, subiter, *sit);
+			}
+			iter.close_container(subiter);
+			break;
+		}
+	case DBUS_TYPE_STRUCT:
+		{
+			DBusSignatureIter subtype;
+			dbus_signature_iter_recurse(type, &subtype);
+			MessageIter subiter = iter.new_struct();
+			int i = 0;
+			do {
+				load_iter_from_setting(&subtype, subiter, s[i++]);
+			} while (dbus_signature_iter_next(&subtype));
+			iter.close_container(subiter);
+			break;
+		}
+	case DBUS_TYPE_VARIANT:
+		{
+			break;
+		}
+	default:
+		break;
+	}
+}
+
+void IpcamBase::LoadConfig()
+{
+	std::string spath(path(), 1);
+	std::replace(spath.begin(), spath.end(), '/', '_');
+
+	Setting &root = _runtime.config().getRoot();
+
+	if (!root.exists(spath))
+		return;
+
+	try {
+		Setting &sobj = root.lookup(spath);
+		Setting::iterator iit(sobj);
+		for (iit = sobj.begin(); iit != sobj.end(); iit++) {
+			std::string sifname(iit->getName());
+			std::replace(sifname.begin(), sifname.end(), '_', '.');
+
+			InterfaceAdaptor *ifadap = find_interface(sifname);
+			if (!ifadap)
+				continue;
+
+			Setting::iterator pit(iit);
+			for (pit = iit->begin(); pit != iit->end(); pit++) {
+				std::string pname = pit->getName();
+				try {
+					Variant value;
+					do_property_get(*ifadap, pname, value);
+
+					Signature sig = value.signature();
+					DBusSignatureIter type;
+					dbus_signature_iter_init(&type, sig.c_str());
+					Variant new_value;
+					MessageIter iter = new_value.writer();
+
+					load_iter_from_setting(&type, iter, *pit);
+
+					do_property_set(*ifadap, pname, new_value);
+				}
+				catch (DBus::Error &e) {
+					printf("%s: %s\n", e.name(), e.message());
+				}
+				catch (SettingException &e) {
+					printf("libconfig error: %s\n", e.what());
+				}
+			}
+		}
+	}
+	catch (SettingException &e) {
+		printf("%s:%s\n", e.what(), e.getPath());
+	}
+	catch (...) {
+		printf("%s:%s\n", __func__, "Unknown error\n");
+	}
+}
+
+static Setting::Type dbus_type_to_setting_type(int dbus_type)
+{
+	switch (dbus_type) {
+	case DBUS_TYPE_BYTE:
+	case DBUS_TYPE_INT16:
+	case DBUS_TYPE_UINT16:
+	case DBUS_TYPE_INT32:
+	case DBUS_TYPE_UINT32:
+		return Setting::TypeInt;
+	case DBUS_TYPE_INT64:
+	case DBUS_TYPE_UINT64:
+		return Setting::TypeInt64;
+	case DBUS_TYPE_DOUBLE:
+		return Setting::TypeFloat;
+	case DBUS_TYPE_STRING:
+	case DBUS_TYPE_OBJECT_PATH:
+	case DBUS_TYPE_SIGNATURE:
+		return Setting::TypeString;
+	case DBUS_TYPE_BOOLEAN:
+		return Setting::TypeBoolean;
+	case DBUS_TYPE_ARRAY:
+		return Setting::TypeArray;
+	case DBUS_TYPE_STRUCT:
+		return Setting::TypeList;
+	case DBUS_TYPE_VARIANT:
+	default:
+		break;
+	}
+	return Setting::TypeNone;
+}
+
+static void save_iter_to_setting(MessageIter &iter, Setting &s)
+{
+	switch (iter.type()) {
+	case DBUS_TYPE_BYTE:
+		{
+			unsigned char n;
+			iter >> n;
+			s = n;
+			break;
+		}
+	case DBUS_TYPE_BOOLEAN:
+		{
+			bool b;
+			iter >> b;
+			s = b;
+			break;
+		}
+	case DBUS_TYPE_INT16:
+		{
+			dbus_int16_t n;
+			iter >> n;
+			s = n;
+			break;
+		}
+	case DBUS_TYPE_UINT16:
+		{
+			dbus_uint16_t n;
+			iter >> n;
+			s = n;
+			break;
+		}
+	case DBUS_TYPE_INT32:
+		{
+			dbus_int32_t n;
+			iter >> n;
+			s = n;
+			break;
+		}
+	case DBUS_TYPE_UINT32:
+		{
+			dbus_uint32_t n;
+			iter >> n;
+			s = (int)n;
+			break;
+		}
+	case DBUS_TYPE_INT64:
+		{
+			dbus_int64_t n;
+			iter >> n;
+			s = n;
+			break;
+		}
+	case DBUS_TYPE_UINT64:
+		{
+			dbus_uint64_t n;
+			iter >> n;
+			s = (const long long)n;
+			break;
+		}
+	case DBUS_TYPE_DOUBLE:
+		{
+			double d;
+			iter >> d;
+			s = d;
+			break;
+		}
+	case DBUS_TYPE_STRING:
+	case DBUS_TYPE_OBJECT_PATH:
+	case DBUS_TYPE_SIGNATURE:
+		{
+			std::string str;
+			iter >> str;
+			s = str;
+			break;
+		}
+	case DBUS_TYPE_ARRAY:
+		{
+			MessageIter subiter = iter.recurse();
+			Setting::Type t = dbus_type_to_setting_type(subiter.type());
+			if (t != Setting::TypeNone) {
+				do {
+					save_iter_to_setting(subiter, s.add(t));
+				} while (!subiter.at_end());
+			}
+			break;
+		}
+	case DBUS_TYPE_STRUCT:
+		{
+			MessageIter subiter = iter.recurse();
+			do {
+				Setting::Type t = dbus_type_to_setting_type(subiter.type());
+				if (t != Setting::TypeNone) {
+					save_iter_to_setting(subiter, s.add(t));
+				}
+				else {
+					subiter++;
+				}
+			} while (!subiter.at_end());
+			break;
+		}
+	case DBUS_TYPE_DICT_ENTRY:
+	case DBUS_TYPE_VARIANT:
+	default:
+		break;
+	}
+}
+
+#endif /* HAVE_LIBCONFIG_SUPPORT */
+
+
 void IpcamBase::on_get_property
 (DBus::InterfaceAdaptor &interface, const std::string &property, DBus::Variant &value)
 {
-    value.clear();
+	value.clear();
 	do_property_get(interface, property, value);
 }
 
@@ -45,4 +337,39 @@ void IpcamBase::on_set_property
 (DBus::InterfaceAdaptor &interface, const std::string &property, const DBus::Variant &value)
 {
 	do_property_set(interface, property, value);
+
+#ifdef HAVE_LIBCONFIG_SUPPORT
+	try {
+		std::string spath(path(), 1);
+		std::replace(spath.begin(), spath.end(), '/', '_');
+		std::string sifname(interface.name());
+		std::replace(sifname.begin(), sifname.end(), '.', '_');
+
+		Setting &root = _runtime.config().getRoot();
+		if (root.exists(spath)) {
+			Setting &o = root.lookup(spath);
+			if (!o.exists(sifname))
+				o.add(sifname, Setting::TypeGroup);
+		}
+		else {
+			root.add(spath, Setting::TypeGroup).add(sifname, Setting::TypeGroup);
+		}
+
+		Setting &sif = root.lookup(spath).lookup(sifname);
+
+		if (sif.exists(property))
+			sif.remove(property);
+
+		MessageIter ri = value.reader();
+		Setting::Type t = dbus_type_to_setting_type(ri.type());
+		if (t != Setting::TypeNone) {
+			if (sif.exists(property))
+				sif.remove(property);
+			save_iter_to_setting(ri, sif.add(property, t));
+		}
+	}
+	catch (SettingException &e) {}
+
+	_runtime.SaveConfig();
+#endif /* HAVE_LIBCONFIG_SUPPORT */
 }
diff --git a/src/dbus/dbus-ipcam-base.h b/src/dbus/dbus-ipcam-base.h
index c9468be..4e580df 100644
--- a/src/dbus/dbus-ipcam-base.h
+++ b/src/dbus/dbus-ipcam-base.h
@@ -33,6 +33,10 @@ class IpcamBase :
 {
 public:
 	IpcamBase(IpcamRuntime &runtime, const Path &path);
+
+#ifdef HAVE_LIBCONFIG_SUPPORT
+	virtual void LoadConfig();
+#endif
 protected:
 	virtual void do_property_get(InterfaceAdaptor &interface, const std::string &property, Variant &value) = 0;
 	virtual void do_property_set(InterfaceAdaptor &interface, const std::string &property, const Variant &value) = 0;
diff --git a/src/dbus/dbus-video-encoder.cpp b/src/dbus/dbus-video-encoder.cpp
index f5ae99d..e236562 100644
--- a/src/dbus/dbus-video-encoder.cpp
+++ b/src/dbus/dbus-video-encoder.cpp
@@ -21,6 +21,7 @@
 #include <config.h>
 #endif
 
+#include <algorithm>
 #include <dbus-c++/dbus.h>
 #include <ipcam-runtime.h>
 
@@ -125,9 +126,32 @@ void VideoEncoder::do_property_set
     iter->second.Set(interface, property, value);
 }
 
-DBus::Path VideoEncoder::CreateOSD(const uint32_t& index)
+#ifdef HAVE_LIBCONFIG_SUPPORT
+void VideoEncoder::LoadConfig()
+{
+    IpcamBase::LoadConfig();
+
+    Setting &root = _runtime.config().getRoot();
+    // Load osd configuration according the config
+    for (int i = 0; i < 8; i++) {
+        std::string spath(path() + "/OSD/" + std::to_string(i), 1);
+        std::replace(spath.begin(), spath.end(), '/', '_');
+        if (root.exists(spath)) {
+            try {
+                VideoOSD &o = NewOSD(i);
+                o.LoadConfig();
+            }
+            catch (IpcamError &e) {
+                printf("Error creating OSD: %s\n", e.what());
+            }
+        }
+    }
+}
+#endif
+
+VideoOSD& VideoEncoder::NewOSD(const uint32_t index)
 {
-    std::map<uint32_t, VideoOSD>::iterator it = _osds.find(index);
+    VideoOSDTable::iterator it = _osds.find(index);
     if (it != _osds.end())
         throw IpcamError("OSD already exists");
 
@@ -136,11 +160,19 @@ DBus::Path VideoEncoder::CreateOSD(const uint32_t& index)
     if (!video_osd)
         throw IpcamError("Create OSD instance failed");
 
-    _osds.emplace(std::piecewise_construct,
-                  std::forward_as_tuple(index),
-                  std::forward_as_tuple(_runtime, obj_path, video_osd));
+    auto iter = \
+        _osds.emplace(std::piecewise_construct,
+                      std::forward_as_tuple(index),
+                      std::forward_as_tuple(_runtime, obj_path, video_osd));
+
+    return iter.first->second;
+}
+
+DBus::Path VideoEncoder::CreateOSD(const uint32_t& index)
+{
+    VideoOSD& osd = NewOSD(index);
 
-    return obj_path;
+    return osd.path();
 }
 
 void VideoEncoder::DeleteOSD(const uint32_t& index)
diff --git a/src/dbus/dbus-video-encoder.h b/src/dbus/dbus-video-encoder.h
index e139551..972efbc 100644
--- a/src/dbus/dbus-video-encoder.h
+++ b/src/dbus/dbus-video-encoder.h
@@ -28,6 +28,8 @@ using namespace Ipcam::Media;
 
 namespace DBus {
 
+typedef std::map<uint32_t, VideoOSD> VideoOSDTable;
+
 class VideoEncoder : 
   public ipcam::Media::VideoEncoder_adaptor,
   public ipcam::Media::VideoEncoder::RateControl_adaptor,
@@ -42,13 +44,18 @@ public:
 	void do_property_set
 		(DBus::InterfaceAdaptor &interface, const std::string &property, const DBus::Variant &value);
 
+#ifdef HAVE_LIBCONFIG_SUPPORT
+    void LoadConfig();
+#endif
+
     ::DBus::Path CreateOSD(const uint32_t& index);
     void DeleteOSD(const uint32_t& index);
     std::map<uint32_t, ::DBus::Path> GetOSDs();
 protected:
-    IVideoEncoder *_video_encoder;
+    IVideoEncoder   *_video_encoder;
 private:
-    std::map<uint32_t, VideoOSD> _osds;
+    VideoOSDTable   _osds;
+    VideoOSD& NewOSD(const uint32_t index);
 };
 
 class H264VideoEncoder : 
diff --git a/src/ipcam-runtime.cpp b/src/ipcam-runtime.cpp
index 47f7f6d..23e318f 100644
--- a/src/ipcam-runtime.cpp
+++ b/src/ipcam-runtime.cpp
@@ -43,11 +43,34 @@ const char *AUDIO_ENCODER_SERVER_PATH = "/ipcam/Media/AudioEncoder";
 IpcamRuntime::IpcamRuntime
 (ev::default_loop &loop, RTSPServer *rtspServer, DBus::Connection *conn)
 	: _loop(loop), _rtsp_server(rtspServer), _dbus_connection(conn)
+#ifdef HAVE_LIBCONFIG_SUPPORT
+      ,_config_timer(loop)
+#endif
 {
+#ifdef HAVE_LIBCONFIG_SUPPORT
+	_config_name = SYSCONFDIR "/" PACKAGE_NAME ".conf";
+	try {
+		_config.readFile(_config_name.c_str());
+	}
+	catch (const ConfigException &e) {
+		std::cerr << "Error while reading file" << std::endl;
+	}
+#endif
 }
 
 IpcamRuntime::~IpcamRuntime()
 {
+#ifdef HAVE_LIBCONFIG_SUPPORT
+	if (_config_dirty) {
+		try {
+			_config.writeFile(_config_name.c_str());
+			_config_dirty = false;
+		}
+		catch (const ConfigException &e) {
+			std::cerr << "Error while writing configuration file" << std::endl;
+		}
+	}
+#endif
 }
 
 RTSPStream IpcamRuntime::addRTSPStream
@@ -121,3 +144,39 @@ void IpcamRuntime::addVideoEncoderInterface(IVideoEncoder *video_encoder)
 		break;
 	}
 }
+
+#ifdef HAVE_LIBCONFIG_SUPPORT
+void IpcamRuntime::LoadConfig()
+{
+	for (auto &asrc : _audio_source_list)
+		asrc->LoadConfig();
+	for (auto &aenc : _audio_encoder_list)
+		aenc->LoadConfig();
+	for (auto &vsrc : _video_source_list)
+		vsrc->LoadConfig();
+	for (auto &venc : _video_encoder_list)
+		venc->LoadConfig();
+}
+
+void IpcamRuntime::config_timer_handler(ev::timer &w, int revents)
+{
+	if (!_config_dirty)
+		return;
+
+	try {
+		_config.writeFile(_config_name.c_str());
+		_config_dirty = false;
+	}
+	catch (const ConfigException &e) {
+		std::cerr << "Error while writing configuration file" << std::endl;
+	}
+}
+
+void IpcamRuntime::SaveConfig()
+{
+	_config_dirty = true;
+	_config_timer.set(20.0, 0);
+	_config_timer.set<IpcamRuntime, &IpcamRuntime::config_timer_handler>(this);
+	_config_timer.start();
+}
+#endif
diff --git a/src/ipcam-runtime.h b/src/ipcam-runtime.h
index 2dc0481..7e607f5 100644
--- a/src/ipcam-runtime.h
+++ b/src/ipcam-runtime.h
@@ -20,10 +20,16 @@
 #ifndef _IPCAM_RUNTIME_H_
 #define _IPCAM_RUNTIME_H_
 
+#include <memory>
 #include <list>
 #include <ev++.h>
 #include <ipcam-media-iface.h>
 
+#ifdef HAVE_LIBCONFIG_SUPPORT
+#include <libconfig.h++>
+using namespace libconfig;
+#endif
+
 using namespace Ipcam::Media;
 
 class RTSPServer;
@@ -57,10 +63,22 @@ public:
 
 	ev::default_loop &mainloop() { return _loop; }
 	DBus::Connection &dbus_conn() { return *_dbus_connection; }
+#ifdef HAVE_LIBCONFIG_SUPPORT
+	Config &config() { return _config; }
+	void LoadConfig();
+	void SaveConfig();
+#endif
 private:
 	ev::default_loop	&_loop;
 	RTSPServer          *_rtsp_server;
 	DBus::Connection    *_dbus_connection;
+#ifdef HAVE_LIBCONFIG_SUPPORT
+	Config				_config;
+	std::string			_config_name;
+	bool				_config_dirty;
+	ev::timer			_config_timer;
+	void config_timer_handler(ev::timer &w, int revents);
+#endif
 
 	typedef std::list<ServerMediaSession*> IpcamStreamList;
 	typedef std::list<std::unique_ptr<DBus::AudioSource>> IpcamAudioSourceList;
diff --git a/src/main.cpp b/src/main.cpp
index 455012c..c9a451f 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -264,6 +264,10 @@ int main(int argc, char *argv[])
 	Hi3520mppMedia hi3520media(runtime, sensor_type);
 #endif
 
+#ifdef HAVE_LIBCONFIG_SUPPORT
+	runtime->LoadConfig();
+#endif
+
 	mainloop.run();
 
 	delete runtime;
diff --git a/src/platform/Makefile.in b/src/platform/Makefile.in
index b35511c..0dc59a0 100644
--- a/src/platform/Makefile.in
+++ b/src/platform/Makefile.in
@@ -237,6 +237,8 @@ INSTALL_SCRIPT = @INSTALL_SCRIPT@
 INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
 LD = @LD@
 LDFLAGS = @LDFLAGS@
+LIBCONFIG_CFLAGS = @LIBCONFIG_CFLAGS@
+LIBCONFIG_LIBS = @LIBCONFIG_LIBS@
 LIBEV_LDFLAGS = @LIBEV_LDFLAGS@
 LIBOBJS = @LIBOBJS@
 LIBS = @LIBS@
diff --git a/src/platform/hi3518v100mpp/Makefile.in b/src/platform/hi3518v100mpp/Makefile.in
index 0324680..8e4474c 100644
--- a/src/platform/hi3518v100mpp/Makefile.in
+++ b/src/platform/hi3518v100mpp/Makefile.in
@@ -244,6 +244,8 @@ INSTALL_SCRIPT = @INSTALL_SCRIPT@
 INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
 LD = @LD@
 LDFLAGS = @LDFLAGS@
+LIBCONFIG_CFLAGS = @LIBCONFIG_CFLAGS@
+LIBCONFIG_LIBS = @LIBCONFIG_LIBS@
 LIBEV_LDFLAGS = @LIBEV_LDFLAGS@
 LIBOBJS = @LIBOBJS@
 LIBS = @LIBS@
diff --git a/src/platform/hi3518v200mpp/Makefile.in b/src/platform/hi3518v200mpp/Makefile.in
index 9b210d0..d1c80b5 100644
--- a/src/platform/hi3518v200mpp/Makefile.in
+++ b/src/platform/hi3518v200mpp/Makefile.in
@@ -244,6 +244,8 @@ INSTALL_SCRIPT = @INSTALL_SCRIPT@
 INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
 LD = @LD@
 LDFLAGS = @LDFLAGS@
+LIBCONFIG_CFLAGS = @LIBCONFIG_CFLAGS@
+LIBCONFIG_LIBS = @LIBCONFIG_LIBS@
 LIBEV_LDFLAGS = @LIBEV_LDFLAGS@
 LIBOBJS = @LIBOBJS@
 LIBS = @LIBS@
diff --git a/src/platform/hi3520v100mpp/Makefile.in b/src/platform/hi3520v100mpp/Makefile.in
index 15853ea..3675dc2 100644
--- a/src/platform/hi3520v100mpp/Makefile.in
+++ b/src/platform/hi3520v100mpp/Makefile.in
@@ -245,6 +245,8 @@ INSTALL_SCRIPT = @INSTALL_SCRIPT@
 INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
 LD = @LD@
 LDFLAGS = @LDFLAGS@
+LIBCONFIG_CFLAGS = @LIBCONFIG_CFLAGS@
+LIBCONFIG_LIBS = @LIBCONFIG_LIBS@
 LIBEV_LDFLAGS = @LIBEV_LDFLAGS@
 LIBOBJS = @LIBOBJS@
 LIBS = @LIBS@
diff --git a/src/rtsp-server/Makefile.in b/src/rtsp-server/Makefile.in
index b41a3a0..be317f7 100644
--- a/src/rtsp-server/Makefile.in
+++ b/src/rtsp-server/Makefile.in
@@ -241,6 +241,8 @@ INSTALL_SCRIPT = @INSTALL_SCRIPT@
 INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
 LD = @LD@
 LDFLAGS = @LDFLAGS@
+LIBCONFIG_CFLAGS = @LIBCONFIG_CFLAGS@
+LIBCONFIG_LIBS = @LIBCONFIG_LIBS@
 LIBEV_LDFLAGS = @LIBEV_LDFLAGS@
 LIBOBJS = @LIBOBJS@
 LIBS = @LIBS@
-- 
2.9.3

